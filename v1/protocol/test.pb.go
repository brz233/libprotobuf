// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: test.proto

package protocol

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Test1 struct {
	DoubleValue          float64  `protobuf:"fixed64,1,opt,name=double_value,json=doubleValue,proto3" json:"double_value,omitempty"`
	FloatValue           float32  `protobuf:"fixed32,2,opt,name=float_value,json=floatValue,proto3" json:"float_value,omitempty"`
	I32Value             int32    `protobuf:"varint,3,opt,name=i32_value,json=i32Value,proto3" json:"i32_value,omitempty"`
	I64Value             int64    `protobuf:"varint,4,opt,name=i64_value,json=i64Value,proto3" json:"i64_value,omitempty"`
	U32Value             uint32   `protobuf:"varint,5,opt,name=u32_value,json=u32Value,proto3" json:"u32_value,omitempty"`
	U64Value             uint64   `protobuf:"varint,6,opt,name=u64_value,json=u64Value,proto3" json:"u64_value,omitempty"`
	S32Value             int32    `protobuf:"zigzag32,7,opt,name=s32_value,json=s32Value,proto3" json:"s32_value,omitempty"`
	S64Value             int64    `protobuf:"zigzag64,8,opt,name=s64_value,json=s64Value,proto3" json:"s64_value,omitempty"`
	F32Value             uint32   `protobuf:"fixed32,9,opt,name=f32_value,json=f32Value,proto3" json:"f32_value,omitempty"`
	F64Value             uint64   `protobuf:"fixed64,10,opt,name=f64_value,json=f64Value,proto3" json:"f64_value,omitempty"`
	Sf32Value            int32    `protobuf:"fixed32,11,opt,name=sf32_value,json=sf32Value,proto3" json:"sf32_value,omitempty"`
	Sf64Value            int64    `protobuf:"fixed64,12,opt,name=sf64_value,json=sf64Value,proto3" json:"sf64_value,omitempty"`
	BoolValue            bool     `protobuf:"varint,13,opt,name=bool_value,json=boolValue,proto3" json:"bool_value,omitempty"`
	StringValue          string   `protobuf:"bytes,14,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
	BytesValue           []byte   `protobuf:"bytes,15,opt,name=bytes_value,json=bytesValue,proto3" json:"bytes_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Test1) Reset()         { *m = Test1{} }
func (m *Test1) String() string { return proto.CompactTextString(m) }
func (*Test1) ProtoMessage()    {}
func (*Test1) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{0}
}
func (m *Test1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Test1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Test1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Test1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Test1.Merge(m, src)
}
func (m *Test1) XXX_Size() int {
	return m.Size()
}
func (m *Test1) XXX_DiscardUnknown() {
	xxx_messageInfo_Test1.DiscardUnknown(m)
}

var xxx_messageInfo_Test1 proto.InternalMessageInfo

func (m *Test1) GetDoubleValue() float64 {
	if m != nil {
		return m.DoubleValue
	}
	return 0
}

func (m *Test1) GetFloatValue() float32 {
	if m != nil {
		return m.FloatValue
	}
	return 0
}

func (m *Test1) GetI32Value() int32 {
	if m != nil {
		return m.I32Value
	}
	return 0
}

func (m *Test1) GetI64Value() int64 {
	if m != nil {
		return m.I64Value
	}
	return 0
}

func (m *Test1) GetU32Value() uint32 {
	if m != nil {
		return m.U32Value
	}
	return 0
}

func (m *Test1) GetU64Value() uint64 {
	if m != nil {
		return m.U64Value
	}
	return 0
}

func (m *Test1) GetS32Value() int32 {
	if m != nil {
		return m.S32Value
	}
	return 0
}

func (m *Test1) GetS64Value() int64 {
	if m != nil {
		return m.S64Value
	}
	return 0
}

func (m *Test1) GetF32Value() uint32 {
	if m != nil {
		return m.F32Value
	}
	return 0
}

func (m *Test1) GetF64Value() uint64 {
	if m != nil {
		return m.F64Value
	}
	return 0
}

func (m *Test1) GetSf32Value() int32 {
	if m != nil {
		return m.Sf32Value
	}
	return 0
}

func (m *Test1) GetSf64Value() int64 {
	if m != nil {
		return m.Sf64Value
	}
	return 0
}

func (m *Test1) GetBoolValue() bool {
	if m != nil {
		return m.BoolValue
	}
	return false
}

func (m *Test1) GetStringValue() string {
	if m != nil {
		return m.StringValue
	}
	return ""
}

func (m *Test1) GetBytesValue() []byte {
	if m != nil {
		return m.BytesValue
	}
	return nil
}

func init() {
	proto.RegisterType((*Test1)(nil), "protocol.test1")
}

func init() { proto.RegisterFile("test.proto", fileDescriptor_c161fcfdc0c3ff1e) }

var fileDescriptor_c161fcfdc0c3ff1e = []byte{
	// 294 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0xd1, 0x3d, 0x4e, 0xc3, 0x40,
	0x10, 0x86, 0x61, 0x26, 0xbf, 0xeb, 0xb1, 0x43, 0x82, 0x2b, 0x24, 0x84, 0x99, 0x50, 0x4d, 0x85,
	0x44, 0x12, 0xe5, 0x00, 0x1c, 0x61, 0x0a, 0x5a, 0x14, 0x83, 0x8d, 0x2c, 0x59, 0x2c, 0xca, 0xda,
	0x48, 0xdc, 0x84, 0x23, 0x51, 0x52, 0x70, 0x00, 0x14, 0x2e, 0x82, 0xbc, 0x5e, 0x36, 0x5b, 0xad,
	0xf4, 0xbd, 0xf3, 0x54, 0x8b, 0xd8, 0x14, 0xa6, 0xb9, 0x79, 0xdd, 0xeb, 0x46, 0xa7, 0xca, 0x3e,
	0x8f, 0xba, 0xbe, 0xfe, 0x1e, 0xe2, 0xb8, 0x0b, 0xb7, 0xe9, 0x12, 0x93, 0x27, 0xdd, 0xe6, 0x75,
	0xf1, 0xf0, 0xb6, 0xab, 0xdb, 0xe2, 0x1c, 0x08, 0x18, 0x24, 0xee, 0xb7, 0xfb, 0x6e, 0x4a, 0xaf,
	0x30, 0x2e, 0x6b, 0xbd, 0x6b, 0xdc, 0xc5, 0x80, 0x80, 0x07, 0x82, 0x76, 0xea, 0x0f, 0x2e, 0x30,
	0xaa, 0xd6, 0x2b, 0x97, 0x87, 0x04, 0x3c, 0x16, 0x55, 0xad, 0x57, 0xc7, 0xb8, 0xdd, 0xb8, 0x38,
	0x22, 0xe0, 0xa1, 0xa8, 0x6a, 0xbb, 0xf1, 0xb1, 0xf5, 0x72, 0x4c, 0xc0, 0x33, 0x51, 0x6d, 0x20,
	0x5b, 0x2f, 0x27, 0x04, 0x3c, 0x12, 0xd5, 0x06, 0xd2, 0x78, 0x39, 0x25, 0xe0, 0x33, 0x51, 0x26,
	0x90, 0xc6, 0x4b, 0x45, 0xc0, 0xa9, 0x28, 0x13, 0xc8, 0xd2, 0xcb, 0x88, 0x80, 0xa7, 0xa2, 0xca,
	0x40, 0x96, 0x5e, 0x22, 0x01, 0x4f, 0x44, 0x95, 0xff, 0xf2, 0x12, 0xd1, 0x1c, 0x69, 0x4c, 0xc0,
	0x73, 0x89, 0x8c, 0xb7, 0x36, 0x7b, 0x9c, 0x10, 0xf0, 0xa2, 0xcb, 0x81, 0xce, 0xb5, 0xae, 0x5d,
	0x9e, 0x11, 0xb0, 0x92, 0xa8, 0x5b, 0xfa, 0xbc, 0xc4, 0xc4, 0x34, 0xfb, 0xea, 0xe5, 0xd9, 0x1d,
	0x9c, 0x12, 0x70, 0x24, 0x71, 0xbf, 0xf9, 0x8f, 0xc8, 0xdf, 0x9b, 0xc2, 0xb8, 0x8b, 0x39, 0x01,
	0x27, 0x82, 0x76, 0xb2, 0x07, 0x77, 0x8b, 0xcf, 0x43, 0x06, 0x5f, 0x87, 0x0c, 0x7e, 0x0e, 0x19,
	0x7c, 0xfc, 0x66, 0x27, 0xf9, 0xc4, 0x7e, 0xf9, 0xfa, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x24,
	0x9c, 0x46, 0x07, 0x02, 0x00, 0x00,
}

func (m *Test1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Test1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Test1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BytesValue) > 0 {
		i -= len(m.BytesValue)
		copy(dAtA[i:], m.BytesValue)
		i = encodeVarintTest(dAtA, i, uint64(len(m.BytesValue)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.StringValue) > 0 {
		i -= len(m.StringValue)
		copy(dAtA[i:], m.StringValue)
		i = encodeVarintTest(dAtA, i, uint64(len(m.StringValue)))
		i--
		dAtA[i] = 0x72
	}
	if m.BoolValue {
		i--
		if m.BoolValue {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if m.Sf64Value != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Sf64Value))
		i--
		dAtA[i] = 0x61
	}
	if m.Sf32Value != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Sf32Value))
		i--
		dAtA[i] = 0x5d
	}
	if m.F64Value != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.F64Value))
		i--
		dAtA[i] = 0x51
	}
	if m.F32Value != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.F32Value))
		i--
		dAtA[i] = 0x4d
	}
	if m.S64Value != 0 {
		i = encodeVarintTest(dAtA, i, uint64((uint64(m.S64Value)<<1)^uint64((m.S64Value>>63))))
		i--
		dAtA[i] = 0x40
	}
	if m.S32Value != 0 {
		i = encodeVarintTest(dAtA, i, uint64((uint32(m.S32Value)<<1)^uint32((m.S32Value>>31))))
		i--
		dAtA[i] = 0x38
	}
	if m.U64Value != 0 {
		i = encodeVarintTest(dAtA, i, uint64(m.U64Value))
		i--
		dAtA[i] = 0x30
	}
	if m.U32Value != 0 {
		i = encodeVarintTest(dAtA, i, uint64(m.U32Value))
		i--
		dAtA[i] = 0x28
	}
	if m.I64Value != 0 {
		i = encodeVarintTest(dAtA, i, uint64(m.I64Value))
		i--
		dAtA[i] = 0x20
	}
	if m.I32Value != 0 {
		i = encodeVarintTest(dAtA, i, uint64(m.I32Value))
		i--
		dAtA[i] = 0x18
	}
	if m.FloatValue != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.FloatValue))))
		i--
		dAtA[i] = 0x15
	}
	if m.DoubleValue != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.DoubleValue))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func encodeVarintTest(dAtA []byte, offset int, v uint64) int {
	offset -= sovTest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Test1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DoubleValue != 0 {
		n += 9
	}
	if m.FloatValue != 0 {
		n += 5
	}
	if m.I32Value != 0 {
		n += 1 + sovTest(uint64(m.I32Value))
	}
	if m.I64Value != 0 {
		n += 1 + sovTest(uint64(m.I64Value))
	}
	if m.U32Value != 0 {
		n += 1 + sovTest(uint64(m.U32Value))
	}
	if m.U64Value != 0 {
		n += 1 + sovTest(uint64(m.U64Value))
	}
	if m.S32Value != 0 {
		n += 1 + sozTest(uint64(m.S32Value))
	}
	if m.S64Value != 0 {
		n += 1 + sozTest(uint64(m.S64Value))
	}
	if m.F32Value != 0 {
		n += 5
	}
	if m.F64Value != 0 {
		n += 9
	}
	if m.Sf32Value != 0 {
		n += 5
	}
	if m.Sf64Value != 0 {
		n += 9
	}
	if m.BoolValue {
		n += 2
	}
	l = len(m.StringValue)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	l = len(m.BytesValue)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTest(x uint64) (n int) {
	return sovTest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Test1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: test1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: test1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoubleValue", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.DoubleValue = float64(math.Float64frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FloatValue", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.FloatValue = float32(math.Float32frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field I32Value", wireType)
			}
			m.I32Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.I32Value |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field I64Value", wireType)
			}
			m.I64Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.I64Value |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field U32Value", wireType)
			}
			m.U32Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.U32Value |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field U64Value", wireType)
			}
			m.U64Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.U64Value |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field S32Value", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.S32Value = v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field S64Value", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.S64Value = int64(v)
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field F32Value", wireType)
			}
			m.F32Value = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.F32Value = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field F64Value", wireType)
			}
			m.F64Value = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.F64Value = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 11:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sf32Value", wireType)
			}
			m.Sf32Value = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Sf32Value = int32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sf64Value", wireType)
			}
			m.Sf64Value = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Sf64Value = int64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoolValue", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BoolValue = bool(v != 0)
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StringValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BytesValue = append(m.BytesValue[:0], dAtA[iNdEx:postIndex]...)
			if m.BytesValue == nil {
				m.BytesValue = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTest = fmt.Errorf("proto: unexpected end of group")
)
